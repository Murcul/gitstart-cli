name: Build and Release Cross-Platform Executables

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0
  workflow_dispatch:  # Allow manual triggering
    inputs:
      version:
        description: 'Release version'
        required: true
        default: 'v1.0.0'
      make_public:
        description: 'Make release public (even from private repo)'
        type: boolean
        required: false
        default: true
      openai_key:
        description: 'OpenAI API Key to embed (optional)'
        required: false
      anthropic_key:
        description: 'Anthropic API Key to embed (optional)'
        required: false

env:
  PYTHON_VERSION: '3.12'

jobs:
  build:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x86_64
            extension: ''
            setup_cmd: 'sudo apt-get update && sudo apt-get install -y binutils'
          - os: windows-latest
            platform: windows
            arch: x86_64
            extension: '.exe'
            setup_cmd: ''
          - os: macos-latest
            platform: macos
            arch: x86_64
            extension: ''
            setup_cmd: ''

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      uses: astral-sh/setup-uv@v3

    - name: System setup
      if: matrix.setup_cmd != ''
      run: ${{ matrix.setup_cmd }}

    - name: Install dependencies
      run: |
        uv sync --dev

    - name: Create build config with encrypted keys
      shell: bash
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY || github.event.inputs.openai_key || '' }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY || github.event.inputs.anthropic_key || '' }}
        PYTHONIOENCODING: utf-8
      run: |
        # Install cryptography for key encryption
        uv add cryptography
        
        # Run the build script to embed encrypted keys
        uv run python scripts/build_with_keys.py

    - name: Verify build config
      shell: bash
      run: |
        echo "Verifying encrypted build config was created..."
        if [ -f "gsai/build_config.py" ]; then
          echo "SUCCESS: build_config.py created"
          echo "Build type: $(grep 'BUILD_TYPE' gsai/build_config.py || echo 'Not found')"
          echo "Has OpenAI key: $(grep -q 'EMBEDDED_OPENAI_API_KEY = \"\"' gsai/build_config.py && echo 'Empty' || echo 'Set')"
          echo "Has Anthropic key: $(grep -q 'EMBEDDED_ANTHROPIC_API_KEY = \"\"' gsai/build_config.py && echo 'Empty' || echo 'Set')"
        else
          echo "ERROR: build_config.py not created"
          exit 1
        fi

    - name: Build executable with PyInstaller
      shell: bash
      run: |
        # Create PyInstaller spec file
        cat > gsai.spec << 'EOF'
        # -*- mode: python ; coding: utf-8 -*-
        
        import sys
        from pathlib import Path
        
        # Add the project root to Python path
        project_root = Path('.').resolve()
        sys.path.insert(0, str(project_root))
        
        a = Analysis(
            ['gsai/main.py'],
            pathex=[str(project_root)],
            binaries=[],
            datas=[
                ('gsai/agents/prompts/templates', 'gsai/agents/prompts/templates'),
            ],
            hiddenimports=[
                'gsai',
                'gsai.agents',
                'gsai.agents.tools',
                'gsai.agents.tools_agentic',
                'gsai.agents.prompts',
                'gsai.agents.prompts.templates',
                'gsai.build_config',
                'gsai.crypto_utils',
                'gsai.embedded_keys',
                'gsai.key_resolver',
                'tree_sitter',
                'tree_sitter_language_pack',
                'pydantic_ai',
                'pydantic_ai_slim',
                'openai',
                'anthropic',
                'typer',
                'rich',
                'loguru',
                'GitPython',
                'grep_ast',
                'beautifulsoup4',
                'duckduckgo_search',
                'requests',
                'jinja2',
                'tiktoken',
                'pygments',
                'pathspec',
                'networkx',
                'asyncer',
                'diskcache',
                'cryptography',
                'cryptography.fernet',
                'cryptography.hazmat',
                'cryptography.hazmat.primitives',
                'cryptography.hazmat.primitives.hashes',
                'cryptography.hazmat.primitives.kdf',
                'cryptography.hazmat.primitives.kdf.pbkdf2',
            ],
            hookspath=[],
            hooksconfig={},
            runtime_hooks=[],
            excludes=[
                'matplotlib',
                'numpy',
                'pandas',
                'scipy',
                'PIL',
                'tkinter',
            ],
            noarchive=False,
            optimize=0,
        )
        
        pyz = PYZ(a.pure, a.zipped_data, cipher=None)
        
        exe = EXE(
            pyz,
            a.scripts,
            a.binaries,
            a.zipfiles,
            a.datas,
            [],
            name='gsai${{ matrix.extension }}',
            debug=False,
            bootloader_ignore_signals=False,
            strip=False,
            upx=True,
            upx_exclude=[],
            runtime_tmpdir=None,
            console=True,
            disable_windowed_traceback=False,
            argv_emulation=False,
            target_arch=None,
            codesign_identity=None,
            entitlements_file=None,
        )
        EOF
        
        # Build with PyInstaller
        uv run pyinstaller gsai.spec --clean --noconfirm

    - name: Verify executable
      shell: bash
      run: |
        if [ -f "dist/gsai${{ matrix.extension }}" ]; then
          echo "✅ Executable built successfully"
          ls -la dist/gsai${{ matrix.extension }}
          
          # Test the executable (basic check)
          if [ "${{ matrix.platform }}" != "windows" ]; then
            chmod +x dist/gsai${{ matrix.extension }}
            ./dist/gsai${{ matrix.extension }} --version || echo "Version check failed (may be expected)"
          fi
        else
          echo "❌ Executable not found"
          ls -la dist/
          exit 1
        fi

    - name: Prepare release artifact
      shell: bash
      run: |
        # Create release directory
        mkdir -p release
        
        # Set version
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${{ github.ref_name }}"
        fi
        
        # Copy executable with proper naming
        ARTIFACT_NAME="gsai-${VERSION}-${{ matrix.platform }}-${{ matrix.arch }}${{ matrix.extension }}"
        cp "dist/gsai${{ matrix.extension }}" "release/${ARTIFACT_NAME}"
        
        # Create info file
        cat > "release/${ARTIFACT_NAME}.info" << EOF
        GitStart CoPilot CLI
        Version: ${VERSION}
        Platform: ${{ matrix.platform }}
        Architecture: ${{ matrix.arch }}
        Built: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        Commit: ${{ github.sha }}
        EOF
        
        # Create ZIP package with executable
        ZIP_NAME="gsai-${VERSION}-${{ matrix.platform }}-${{ matrix.arch }}"
        mkdir -p "${ZIP_NAME}"
        cp "dist/gsai${{ matrix.extension }}" "${ZIP_NAME}/"
        cp "release/${ARTIFACT_NAME}.info" "${ZIP_NAME}/README.txt"
        
        # Add installation instructions to ZIP
        cat > "${ZIP_NAME}/INSTALL.txt" << EOF
        GitStart CoPilot CLI - Installation Instructions
        
        1. Extract this ZIP file to a directory of your choice
        2. Make the executable runnable (Linux/macOS only):
           chmod +x gsai${{ matrix.extension }}
        3. Run the application:
           ./gsai${{ matrix.extension }} --help
        4. Configure your API keys:
           ./gsai${{ matrix.extension }} configure
        5. Start coding with AI:
           ./gsai${{ matrix.extension }} chat
        
        For more help, visit: https://github.com/your-org/gitstart-cli
        EOF
        
        # Create the ZIP file
        if [ "${{ matrix.platform }}" == "windows" ]; then
          powershell -command "Compress-Archive -Path '${ZIP_NAME}' -DestinationPath 'release/${ZIP_NAME}.zip'"
        else
          zip -r "release/${ZIP_NAME}.zip" "${ZIP_NAME}"
        fi
        
        echo "ARTIFACT_NAME=${ARTIFACT_NAME}" >> $GITHUB_ENV
        echo "ZIP_NAME=${ZIP_NAME}" >> $GITHUB_ENV

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: gsai-${{ matrix.platform }}-${{ matrix.arch }}
        path: release/
        retention-days: 90

    - name: Cleanup build artifacts
      if: always()
      shell: bash
      run: |
        # Clean up build config (contains embedded keys)
        rm -f gsai/build_config.py
        echo "Cleaned up build artifacts"

  source-package:
    name: Create Source Package
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      uses: astral-sh/setup-uv@v3

    - name: Create source packages
      shell: bash
      run: |
        # Set version
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${{ github.ref_name }}"
        fi
        
        mkdir -p release
        
        # Create complete source package
        SOURCE_NAME="gsai-${VERSION}-source"
        mkdir -p "${SOURCE_NAME}"
        
        # Copy source files (exclude .git and build artifacts)
        rsync -av --exclude='.git' \
                  --exclude='__pycache__' \
                  --exclude='*.pyc' \
                  --exclude='.pytest_cache' \
                  --exclude='dist' \
                  --exclude='build' \
                  --exclude='.venv' \
                  --exclude='*.egg-info' \
                  . "${SOURCE_NAME}/"
        
        # Add installation scripts to source package
        cp install.sh "${SOURCE_NAME}/"
        cp install.ps1 "${SOURCE_NAME}/"
        cp standalone-install.sh "${SOURCE_NAME}/"
        
        # Create source installation guide
        cat > "${SOURCE_NAME}/INSTALL-FROM-SOURCE.txt" << 'SOURCE_EOF'
        GitStart CoPilot CLI - Source Installation Guide
        
        ## Method 1: Quick Install with uv (Recommended)
        1. Install uv: curl -LsSf https://astral.sh/uv/install.sh | sh
        2. Install dependencies: uv sync
        3. Run directly: uv run gsai chat
        
        ## Method 2: Global Installation
        1. Install uv: curl -LsSf https://astral.sh/uv/install.sh | sh
        2. Install globally: uv tool install .
        3. Run from anywhere: gsai chat
        
        ## Method 3: Virtual Environment
        1. Create venv: python3 -m venv venv
        2. Activate: source venv/bin/activate (Linux/macOS) or venv\\Scripts\\activate (Windows)
        3. Install: pip install -e .
        4. Run: gsai chat
        
        ## Method 4: Use Installation Scripts
        - Linux/macOS: ./install.sh
        - Windows: .\\install.ps1
        - Zero-deps: ./standalone-install.sh
        
        ## Configuration
        1. Set API keys: gsai configure
        2. Check status: gsai status
        
        For more help: https://github.com/Murcul/gitstart-cli
        SOURCE_EOF
        
        # Create ZIP of source
        zip -r "release/${SOURCE_NAME}.zip" "${SOURCE_NAME}"
        
        # Create minimal source package (just Python code)
        MINIMAL_NAME="gsai-${VERSION}-minimal-source"
        mkdir -p "${MINIMAL_NAME}"
        
        # Copy only essential files
        cp -r gsai "${MINIMAL_NAME}/"
        cp pyproject.toml "${MINIMAL_NAME}/"
        cp README.md "${MINIMAL_NAME}/" 2>/dev/null || echo "# GitStart CoPilot CLI" > "${MINIMAL_NAME}/README.md"
        
        # Create minimal install guide
        cat > "${MINIMAL_NAME}/INSTALL.txt" << 'MINIMAL_EOF'
        GitStart CoPilot CLI - Minimal Source Package
        
        Requirements: Python 3.10+, uv package manager
        
        Quick Install:
        1. pip install uv
        2. uv sync
        3. uv run python -m gsai chat
        
        Alternative:
        1. pip install -e .
        2. gsai chat
        MINIMAL_EOF
        
        # Create ZIP of minimal source
        zip -r "release/${MINIMAL_NAME}.zip" "${MINIMAL_NAME}"
        
        # Create installer-only package
        INSTALLER_NAME="gsai-${VERSION}-installers"
        mkdir -p "${INSTALLER_NAME}"
        
        cp install.sh "${INSTALLER_NAME}/"
        cp install.ps1 "${INSTALLER_NAME}/"
        cp standalone-install.sh "${INSTALLER_NAME}/"
        cp -r docs "${INSTALLER_NAME}/" 2>/dev/null || mkdir "${INSTALLER_NAME}/docs"
        
        cat > "${INSTALLER_NAME}/README.txt" << 'INSTALLER_EOF'
        GitStart CoPilot CLI - One-Command Installers
        
        ## Linux/macOS Full Installer
        curl -sSL https://github.com/Murcul/gitstart-cli/releases/latest/download/install.sh | bash
        
        ## Linux/macOS Zero-Dependency Installer
        curl -sSL https://github.com/Murcul/gitstart-cli/releases/latest/download/standalone-install.sh | bash
        
        ## Windows Installer
        iwr -useb https://github.com/Murcul/gitstart-cli/releases/latest/download/install.ps1 | iex
        
        ## Local Installation
        1. Extract this package
        2. Run the appropriate installer:
           - Linux/macOS: ./install.sh
           - Windows: .\\install.ps1
           - Restricted systems: ./standalone-install.sh
        
        All installers handle prerequisites automatically and add gsai to PATH.
        INSTALLER_EOF
        
        zip -r "release/${INSTALLER_NAME}.zip" "${INSTALLER_NAME}"
        
        # List created packages
        echo "Created source packages:"
        ls -la release/

    - name: Upload source artifacts
      uses: actions/upload-artifact@v4
      with:
        name: source-packages
        path: release/
        retention-days: 90

  release:
    name: Create Release
    needs: [build, source-package]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Prepare release
      run: |
        # Set version
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${{ github.ref_name }}"
        fi
        
        echo "VERSION=${VERSION}" >> $GITHUB_ENV
        
        # Create release directory
        mkdir -p release
        
        # Copy all artifacts to release directory
        find artifacts -name "gsai-*" -type f | while read file; do
          cp "$file" release/
        done
        
        # Copy installer scripts to release
        if [ -f install.sh ]; then cp install.sh release/; fi
        if [ -f install.ps1 ]; then cp install.ps1 release/; fi
        if [ -f standalone-install.sh ]; then cp standalone-install.sh release/; fi
        
        # Create a direct download script for users
        cat > release/quick-install.sh << 'QUICK_EOF'
        #!/bin/bash
        # GitStart CoPilot CLI - Quick Installer
        # This script downloads and runs the appropriate installer for your platform
        
        set -e
        
        VERSION="$1"
        if [ -z "$VERSION" ]; then
            echo "Usage: $0 <version>"
            echo "Example: $0 v1.0.0"
            exit 1
        fi
        
        REPO="YOUR-ORG/gitstart-cli"
        BASE_URL="https://github.com/$REPO/releases/download/$VERSION"
        
        case "$(uname -s)" in
            Linux|Darwin)
                echo "Downloading Linux/macOS installer..."
                curl -sSL "$BASE_URL/install.sh" | bash
                ;;
            MINGW*|CYGWIN*|MSYS*)
                echo "Please run this command in PowerShell:"
                echo "iwr -useb '$BASE_URL/install.ps1' | iex"
                ;;
            *)
                echo "Unsupported platform: $(uname -s)"
                echo "Please download manually from: https://github.com/$REPO/releases/tag/$VERSION"
                exit 1
                ;;
        esac
        QUICK_EOF
        chmod +x release/quick-install.sh
        
        # Create installation instructions
        cat > release/INSTALL.md << 'INSTALL_EOF'
        # GitStart CoPilot CLI Installation
        
        ## 🚀 One-Command Installation
        
        ### Windows
        ```powershell
        iwr -useb https://github.com/Murcul/gitstart-cli/releases/download/${VERSION}/install.ps1 | iex
        ```
        
        ### Linux/macOS
        ```bash
        curl -sSL https://github.com/Murcul/gitstart-cli/releases/download/${VERSION}/install.sh | bash
        ```
        
        ### Zero-Dependency Installer
        ```bash
        curl -sSL https://github.com/Murcul/gitstart-cli/releases/download/${VERSION}/standalone-install.sh | bash
        ```
        
        ## 📦 Direct Download
        
        Download the appropriate executable for your platform:
        - **Windows**: gsai-${VERSION}-windows-x86_64.zip
        - **macOS**: gsai-${VERSION}-macos-x86_64.zip
        - **Linux**: gsai-${VERSION}-linux-x86_64.zip
        
        Extract and run directly - no installation required!
        
        ## 📋 What's Included
        
        - Cross-platform executables with embedded dependencies
        - One-command installers for system-wide installation
        - Source code packages for developers
        - Complete documentation and usage guides
        
        ---
        
        **Repository:** https://github.com/YOUR-ORG/gitstart-cli
        INSTALL_EOF
        
        # List all files
        echo "Release files:"
        ls -la release/

    - name: Generate release notes
      run: |
        cat > release_notes.md << 'NOTES_EOF'
        # GitStart CoPilot CLI ${VERSION}
        
        ## 🚀 Ready-to-Use Downloads
        
        ### 📦 Standalone Executables (Recommended)
        No Python installation required - just download and run:
        
        - **gsai-${VERSION}-windows-x86_64.zip** - Windows 64-bit (with installer)
        - **gsai-${VERSION}-macos-x86_64.zip** - macOS Intel/Apple Silicon (with installer)  
        - **gsai-${VERSION}-linux-x86_64.zip** - Linux 64-bit (with installer)
        
        ### 📋 Source Code Packages
        For developers and custom installations:
        
        - **gsai-${VERSION}-source.zip** - Complete source with installers
        - **gsai-${VERSION}-minimal-source.zip** - Python code only
        - **gsai-${VERSION}-installers.zip** - One-command installers only
        
        ## ⚡ Quick Start
        
        ### Option 1: Download Executable (Easiest)
        1. Download the ZIP for your platform above
        2. Extract and run: \`./gsai chat\` 
        
        ### Option 2: One-Command Install (Recommended)
        \`\`\`bash
        # Linux/macOS
        curl -sSL https://github.com/Murcul/gitstart-cli/releases/download/${VERSION}/install.sh | bash
        
        # Windows PowerShell
        iwr -useb https://github.com/Murcul/gitstart-cli/releases/download/${VERSION}/install.ps1 | iex
        
        # Zero-dependency installer
        curl -sSL https://github.com/Murcul/gitstart-cli/releases/download/${VERSION}/standalone-install.sh | bash
        \`\`\`
        
        ### Option 3: From Source
        \`\`\`bash
        # Download source package, then:
        uv sync && uv run gsai chat
        \`\`\`
        
        ## 🔑 API Keys
        
        **This release includes embedded API keys** from GitHub Secrets for immediate use.
        
        You can also configure your own keys:
        \`\`\`bash
        gsai configure
        \`\`\`
        
        Get your keys from:
        - OpenAI: https://platform.openai.com/api-keys
        - Anthropic: https://console.anthropic.com/
        
        ## 🎯 What's Included
        
        ### All Packages Include:
        - ✅ Interactive AI coding assistant
        - ✅ Cross-platform compatibility  
        - ✅ Embedded API keys (ready to use)
        - ✅ No complex setup required
        - ✅ Complete documentation
        
        ### Executable Packages Also Include:
        - ✅ No Python installation required
        - ✅ All dependencies bundled
        - ✅ Installation instructions
        - ✅ Self-contained operation
        
        ## 📚 Installation Methods Comparison
        
        | Method | Setup Time | Requirements | Best For |
        |--------|------------|--------------|----------|
        | **Executable ZIP** | 30 seconds | None | End users |
        | **One-command installer** | 2 minutes | curl/PowerShell | Quick setup |
        | **Source code** | 3 minutes | Python 3.10+ | Developers |
        
        ## 🛠️ Technical Details
        
        - **Python Version:** 3.12
        - **Dependencies:** All bundled
        - **Platform Support:** Windows, macOS, Linux
        - **Architecture:** x86_64 (64-bit)
        - **API Integration:** OpenAI GPT + Anthropic Claude
        
        ---
        
        **Built:** $(date -u +"%Y-%m-%d %H:%M:%S UTC") | **Commit:** ${{ github.sha }}
        
        **Need help?** Check the included documentation or visit our [GitHub repository](https://github.com/Murcul/gitstart-cli).
        NOTES_EOF

    - name: Delete existing release if it exists
      run: |
        # Set up git config for actions
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        
        echo "Checking for existing release: ${{ env.VERSION }}"
        
        # Check and delete existing release
        RELEASE_ID=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ env.VERSION }}" | \
          grep '"id":' | head -1 | cut -d: -f2 | cut -d, -f1 | tr -d ' ')
        
        if [ -n "$RELEASE_ID" ] && [ "$RELEASE_ID" != "null" ]; then
          echo "Found existing release with ID: $RELEASE_ID, deleting..."
          curl -X DELETE -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID" || true
        else
          echo "No existing release found"
        fi
        
        # Check and delete existing tag  
        if git ls-remote --tags origin | grep -q "refs/tags/${{ env.VERSION }}$"; then
          echo "Found existing tag, deleting..."
          git push origin --delete "${{ env.VERSION }}" || true
        fi
        
        # Also try with gh CLI as backup
        if command -v gh >/dev/null 2>&1; then
          gh release delete "${{ env.VERSION }}" --yes || true
        fi
        
        echo "Cleanup completed"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.VERSION }}
        name: GitStart CoPilot CLI ${{ env.VERSION }}
        body_path: release_notes.md
        files: release/*
        draft: false
        prerelease: ${{ contains(env.VERSION, 'alpha') || contains(env.VERSION, 'beta') || contains(env.VERSION, 'rc') }}
        generate_release_notes: true
        fail_on_unmatched_files: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Make Release Assets Public
      if: github.event.inputs.make_public == 'true' || github.event_name == 'push'
      run: |
        echo "📢 Release created with public assets!"
        echo "🔗 Installation URLs are now public:"
        echo ""
        echo "Windows:"
        echo "  iwr -useb https://github.com/Murcul/gitstart-cli/releases/download/${{ env.VERSION }}/install.ps1 | iex"
        echo ""
        echo "Linux/macOS:"
        echo "  curl -sSL https://github.com/Murcul/gitstart-cli/releases/download/${{ env.VERSION }}/install.sh | bash"
        echo ""
        echo "Zero-dependency:"
        echo "  curl -sSL https://github.com/Murcul/gitstart-cli/releases/download/${{ env.VERSION }}/standalone-install.sh | bash"
        echo ""
        echo "📦 Direct downloads available at:"
        echo "  https://github.com/Murcul/gitstart-cli/releases/tag/${{ env.VERSION }}"
        
    - name: Create Public Installation Guide
      run: |
        cat > public-install-guide.md << 'GUIDE_EOF'
        # GitStart CoPilot CLI - Public Installation Guide
        
        **Version:** ${{ env.VERSION }}
        **Repository:** https://github.com/YOUR-ORG/gitstart-cli
        **Public Release:** https://github.com/Murcul/gitstart-cli/releases/tag/${{ env.VERSION }}
        
        ## 🚀 Installation Commands (Public URLs)
        
        ### Windows
        \`\`\`powershell
        iwr -useb https://github.com/Murcul/gitstart-cli/releases/download/${{ env.VERSION }}/install.ps1 | iex
        \`\`\`
        
        ### Linux/macOS
        \`\`\`bash
        curl -sSL https://github.com/Murcul/gitstart-cli/releases/download/${{ env.VERSION }}/install.sh | bash
        \`\`\`
        
        ### Zero-Dependency Installer
        \`\`\`bash
        curl -sSL https://github.com/Murcul/gitstart-cli/releases/download/${{ env.VERSION }}/standalone-install.sh | bash
        \`\`\`
        
        ## 📦 Direct Downloads
        
        - [Windows Executable](https://github.com/Murcul/gitstart-cli/releases/download/${{ env.VERSION }}/gsai-${{ env.VERSION }}-windows-x86_64.zip)
        - [macOS Executable](https://github.com/Murcul/gitstart-cli/releases/download/${{ env.VERSION }}/gsai-${{ env.VERSION }}-macos-x86_64.zip)
        - [Linux Executable](https://github.com/Murcul/gitstart-cli/releases/download/${{ env.VERSION }}/gsai-${{ env.VERSION }}-linux-x86_64.zip)
        - [Complete Source Code](https://github.com/Murcul/gitstart-cli/releases/download/${{ env.VERSION }}/gsai-${{ env.VERSION }}-source.zip)
        
        ## ℹ️ About
        
        GitStart CoPilot CLI is an AI-powered coding assistant that helps you write, review, and improve code.
        
        **Features:**
        - Interactive AI coding sessions
        - Cross-platform support (Windows, macOS, Linux)
        - Embedded API keys for immediate use
        - No complex setup required
        - System-wide installation with global access
        
        **Note:** This software is distributed from a private repository. The executable releases and installers are made publicly available for easy distribution while keeping the source code private.
        
        ---
        
        **Built:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        **Commit:** ${{ github.sha }}
        GUIDE_EOF
        
        # Upload as release asset
        gh release upload ${{ env.VERSION }} public-install-guide.md --clobber
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
