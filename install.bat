@echo off
REM GitStart CoPilot CLI - One-Click Windows Installer
REM This script installs GitStart CoPilot CLI with embedded API keys

setlocal enabledelayedexpansion

REM Colors for output (limited in Windows CMD)
set "GREEN=[92m"
set "YELLOW=[93m"
set "RED=[91m"
set "BLUE=[94m"
set "NC=[0m"

REM Configuration
set "INSTALL_DIR=%USERPROFILE%\.local\bin"
set "GSAI_DIR=%USERPROFILE%\.ai\gsai"
set "BINARY_NAME=gsai"

:print_banner
echo.
echo %BLUE%==============================================
echo     GitStart CoPilot CLI Installer
echo     Made by GitStart AI ðŸ¤–
echo ==============================================%NC%
echo.
goto :eof

:print_status
echo %GREEN%[INFO]%NC% %~1
goto :eof

:print_warning
echo %YELLOW%[WARN]%NC% %~1
goto :eof

:print_error
echo %RED%[ERROR]%NC% %~1
goto :eof

:check_prerequisites
call :print_status "Checking prerequisites..."

REM Check Python 3.12+
python --version >nul 2>&1
if errorlevel 1 (
    call :print_error "Python 3 is required but not installed."
    exit /b 1
)

for /f "tokens=2" %%i in ('python --version 2^>^&1') do set python_version=%%i
call :print_status "Python !python_version! detected âœ“"

REM Check if Python version is 3.12+
python -c "import sys; exit(0 if sys.version_info >= (3, 12) else 1)" 2>nul
if errorlevel 1 (
    call :print_error "Python 3.12+ is required. Found Python !python_version!"
    exit /b 1
)

REM Check uv
uv --version >nul 2>&1
if errorlevel 1 (
    call :print_status "Installing uv package manager..."
    powershell -Command "irm https://astral.sh/uv/install.ps1 | iex"
    if errorlevel 1 (
        call :print_error "Failed to install uv. Please install manually: https://docs.astral.sh/uv/"
        exit /b 1
    )
)

call :print_status "uv package manager detected âœ“"

REM Check git
git --version >nul 2>&1
if errorlevel 1 (
    call :print_warning "Git is recommended for repository operations but not required."
) else (
    call :print_status "Git detected âœ“"
)

goto :eof

:get_api_keys
call :print_status "API Key Configuration"
echo GitStart CoPilot requires at least one API key to function.
echo You can skip this step and configure later with 'gsai configure'
echo.

REM Get OpenAI API Key
set /p "OPENAI_KEY=Enter your OpenAI API Key (or press Enter to skip): "

REM Get Anthropic API Key
set /p "ANTHROPIC_KEY=Enter your Anthropic API Key (or press Enter to skip): "

if "!OPENAI_KEY!"=="" if "!ANTHROPIC_KEY!"=="" (
    call :print_warning "No API keys provided. You'll need to configure them later."
    exit /b 1
)

exit /b 0

:install_dependencies
call :print_status "Installing dependencies..."

uv sync --dev
if errorlevel 1 (
    call :print_error "Failed to install dependencies"
    exit /b 1
)

call :print_status "Dependencies installed âœ“"
goto :eof

:install_gsai
call :print_status "Installing GitStart CoPilot CLI..."

REM Create install directory
if not exist "%INSTALL_DIR%" mkdir "%INSTALL_DIR%"

REM Install using uv tool
uv tool install . --force
if errorlevel 1 (
    call :print_error "Failed to install GitStart CoPilot CLI"
    exit /b 1
)

call :print_status "GitStart CoPilot CLI installed successfully âœ“"

REM Add to PATH
echo Adding %INSTALL_DIR% to PATH...
setx PATH "%PATH%;%INSTALL_DIR%" >nul
set "PATH=%PATH%;%INSTALL_DIR%"
call :print_status "Added %INSTALL_DIR% to PATH"

exit /b 0

:configure_api_keys
if not "!OPENAI_KEY!"=="" (
    call :print_status "Configuring API keys..."
    
    REM Create gsai config directory
    if not exist "%GSAI_DIR%" mkdir "%GSAI_DIR%"
    
    REM Create .env file
    echo # GitStart CoPilot CLI Configuration > "%GSAI_DIR%\.env"
    echo # Generated by installer on %date% %time% >> "%GSAI_DIR%\.env"
    echo. >> "%GSAI_DIR%\.env"
    
    if not "!OPENAI_KEY!"=="" (
        echo OPENAI_API_KEY=!OPENAI_KEY! >> "%GSAI_DIR%\.env"
        call :print_status "OpenAI API key configured âœ“"
    )
    
    if not "!ANTHROPIC_KEY!"=="" (
        echo ANTHROPIC_API_KEY=!ANTHROPIC_KEY! >> "%GSAI_DIR%\.env"
        call :print_status "Anthropic API key configured âœ“"
    )
    
    REM Add default configuration
    echo. >> "%GSAI_DIR%\.env"
    echo # Default Configuration >> "%GSAI_DIR%\.env"
    echo APPROVAL_MODE=suggest >> "%GSAI_DIR%\.env"
    echo WEB_SEARCH_ENABLED=false >> "%GSAI_DIR%\.env"
    echo LOG_LEVEL=INFO >> "%GSAI_DIR%\.env"
    
    call :print_status "Configuration saved to %GSAI_DIR%\.env"
)
goto :eof

:test_installation
call :print_status "Testing installation..."

REM Test if gsai is available
gsai --help >nul 2>&1
if errorlevel 1 (
    call :print_error "gsai command failed"
    call :print_warning "You may need to restart your command prompt"
    exit /b 1
) else (
    call :print_status "Installation test passed âœ“"
    exit /b 0
)

:show_completion_message
call :print_status "Installation completed successfully! ðŸŽ‰"
echo.
echo %GREEN%GitStart CoPilot CLI is now installed and ready to use!%NC%
echo.
echo Quick Start:
echo   1. Open a new command prompt
echo   2. Navigate to your project directory
echo   3. Run: gsai chat
echo.
echo Useful Commands:
echo   gsai --help          - Show help
echo   gsai version         - Show version
echo   gsai status          - Check configuration
echo   gsai configure       - Configure settings
echo   gsai chat            - Start AI coding session
echo.
echo Configuration:
echo   Config file: %GSAI_DIR%\.env
echo   Logs: Use 'gsai status' to check configuration
echo.
echo Need help? Check the README.md file or visit the documentation.
goto :eof

:main
call :print_banner

REM Check if we're in the right directory
if not exist "pyproject.toml" (
    call :print_error "This script must be run from the GitStart CoPilot CLI directory"
    call :print_error "Please cd to the project directory and run: install.bat"
    exit /b 1
)

if not exist "gsai\main.py" (
    call :print_error "This script must be run from the GitStart CoPilot CLI directory"
    call :print_error "Please cd to the project directory and run: install.bat"
    exit /b 1
)

REM Installation steps
call :check_prerequisites
if errorlevel 1 exit /b 1

call :get_api_keys

call :install_dependencies
if errorlevel 1 exit /b 1

call :install_gsai
if errorlevel 1 exit /b 1

call :configure_api_keys

call :test_installation
if errorlevel 1 (
    call :print_warning "Installation completed but testing failed."
    call :print_warning "Try running 'gsai --help' in a new command prompt."
) else (
    call :show_completion_message
)

goto :eof

REM Run main function
call :main %*